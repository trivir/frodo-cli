name: 'Frodo CLI Release Pipeline'

on:
  push:
    branches:
      - 'trivir'
  workflow_dispatch:

env:
  NODE_VERSION: 18

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: TriVir changes
        run: |
          npm run trivir-frodo-lib
          npm ci

      - name: 'Prepare Version Bump'
        id: version-bump
        uses: 'phips28/gh-action-bump-version@master'
        with:
          version-type:  'prerelease'
          major-wording: 'MAJOR RELEASE'
          minor-wording: 'MINOR RELEASE'
          patch-wording: 'PATCH RELEASE'
          rc-wording: ''
          tag-prefix: 'v'
          default: prerelease
          preid: 'trivir'
          bump-policy: 'ignore'
          skip-commit: 'true'
          skip-tag: 'true'
          skip-push: 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Version From Tag'
        id: version-from-tag
        run: echo "::set-output name=version::$(echo '${{ steps.version-bump.outputs.newTag }}' | sed 's/v//')"

      - name: Build frodo-cli
        run: |
          npm run build:local

      - name: Build frodo-cli cjs
        run: |
          npm run dist-package
          npm run dist-transpile

      - name: Lint
        run: |
          npm run lint

      - name: Type Check
        run: |
          npx tsc

      - name: Security Audit
        run: |
          npm audit --omit=dev

      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            package.json
            package-lock.json
            esm
            dist

    outputs:
      newTag: ${{ steps.version-bump.outputs.newTag }}
      newVersion: ${{ steps.version-from-tag.outputs.version }}
      preRelease: ${{ contains(steps.version-bump.outputs.newTag, '-') }}

  smoke-tests:
    name: 'Smoke Tests'
    needs: build
    # You must use a Linux environment when using service containers or container jobs
    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        node-version: [20, 18, 16, 14]
#        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
#
#    # Service containers to run with `smoke-tests`
#    services:
#      # Label used to access the service container
#      squid:
#        # Docker Hub image
#        image: ubuntu/squid
#        #
#        ports:
#          # Maps tcp port 3128 on the host to the same port in the service container
#          - 3128:3128
#
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
#
#      - name: Use Node.js ${{ matrix.node-version }}
#        uses: actions/setup-node@v2
#        with:
#          # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
#          node-version: ${{ matrix.node-version }}
#          cache: 'npm'
#
#      # Update npm for older node versions to avoid errors with npm ci due to newer package-lock.json format
#      # TODO: conditionally update npm when it is older than the required version
#      - name: Update npm
#        run: npm install -g npm
#
#      - uses: actions/download-artifact@v3
#        with:
#          name: build
#
#      - name: Install dependencies
#        run: npm ci
#
#      - name: Install frodo-cli globally
#        run: npm i -g
#
#      - name: CLI Help Tests
#        run: |
#          npm test
#
#      - name: Version Test
#        run: |
#          frodo -v
#
#      - name: Direct Tests
#        env:
#          FIDC_TENANT_URL: ${{ secrets.FIDC_TENANT_URL }}
#          FIDC_TENANT_ADMIN_USERNAME: ${{ secrets.FIDC_TENANT_ADMIN_USERNAME }}
#          FIDC_TENANT_ADMIN_PASSWORD: ${{ secrets.FIDC_TENANT_ADMIN_PASSWORD }}
#        run: |
#          frodo conn add "$FIDC_TENANT_URL" "$FIDC_TENANT_ADMIN_USERNAME" "$FIDC_TENANT_ADMIN_PASSWORD"
#          frodo info "$FIDC_TENANT_URL"
#
#      - name: Proxy Tests
#        env:
#          HTTPS_PROXY: 'http://127.0.0.1:3128'
#          FIDC_TENANT_URL: ${{ secrets.FIDC_TENANT_URL }}
#          FIDC_TENANT_ADMIN_USERNAME: ${{ secrets.FIDC_TENANT_ADMIN_USERNAME }}
#          FIDC_TENANT_ADMIN_PASSWORD: ${{ secrets.FIDC_TENANT_ADMIN_PASSWORD }}
#        run: |
#          frodo conn add "$FIDC_TENANT_URL" "$FIDC_TENANT_ADMIN_USERNAME" "$FIDC_TENANT_ADMIN_PASSWORD"
#          frodo info "$FIDC_TENANT_URL"

  release:
#    needs: [build, linux-binary-release, linux-arm64-binary-release, macos-binary-release, npm-release, windows-binary-release]
    needs: [build, linux-binary-release, macos-binary-release, npm-release, windows-binary-release]
    name: 'Release'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: build

      - uses: actions/download-artifact@v3
        with:
          name: dist

      - name: 'Github SHA'
        id: github-sha
        run: echo ${{ github.sha }} > Release.txt

      - name: Update Changelog
        uses: thomaseizinger/keep-a-changelog-new-release@1.3.0
        with:
          tag: ${{ needs.build.outputs.newTag }}

      - name: 'Output Changelog'
        run: cat CHANGELOG.md

      - name: 'Release Header'
        id: release-header
        run: echo "header=$(echo `grep '## \\[${{ needs.build.outputs.newVersion }}] -' CHANGELOG.md | sed 's/## //' | sed 's/\\[//' | sed 's/]//'`)" >> "$GITHUB_OUTPUT"

      - name: 'Extract Release Notes'
        id: extract-release-notes
        uses: 'dahlia/submark@main'
        with:
          input-file: 'CHANGELOG.md'
          heading-level: 2
          heading-title-text: '${{ steps.release-header.outputs.header }}'
          ignore-case: true
          omit-heading: true

      - name: Commit updated changelog and version
        id: commit-changelog
        #TODO: Figure out what values we should use for user.name and user.email
        run: |
          git config user.name "Automated Version Bump"
          git config user.email "gh-action-bump-version@users.noreply.github.com"
          git add CHANGELOG.md package.json
          git commit --message "Updated changelog and version for release ${{ needs.build.outputs.newTag }}"
          git push

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: Frodo CLI ${{ needs.build.outputs.newVersion }}
          tag_name: ${{ needs.build.outputs.newTag }}
          body: ${{ steps.extract-release-notes.outputs.output-text }}
          prerelease: ${{ needs.build.outputs.preRelease }}
          generate_release_notes: ${{ contains(needs.build.outputs.newTag, '-') }}
          files: |
            CHANGELOG.md
            LICENSE
            Release.txt
            frodo-linux-${{ needs.build.outputs.newVersion }}.zip
            frodo-macos-${{ needs.build.outputs.newVersion }}.zip
            frodo-win-${{ needs.build.outputs.newVersion }}.zip
#            frodo-linux-arm64-${{ needs.build.outputs.newVersion }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

  npm-release:
    # npm-release only needs the build job but since it is inconvenient to unpublish an npm we want this job to run last
    #    needs: [build, linux-binary-release, linux-arm64-binary-release, macos-binary-release, windows-binary-release]
    needs: [build, linux-binary-release, macos-binary-release, windows-binary-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - uses: actions/download-artifact@v3
        with:
          name: build

      - name: Install dependencies
        run: npm ci

      - name: Pre-Release
        if: ${{ fromJSON(needs.build.outputs.preRelease) }}
        uses: JS-DevTools/npm-publish@v1
        with:
          access: public
          tag: 'next'
          token: ${{ secrets.NPM_ACCESS_TOKEN }}

      - name: Release
        if: ${{ ! fromJSON(needs.build.outputs.preRelease) }}
        uses: JS-DevTools/npm-publish@v1
        with:
          access: public
          token: ${{ secrets.NPM_ACCESS_TOKEN }}

      - name: Add next tag
        if: ${{ ! fromJSON(needs.build.outputs.preRelease) }}
        run: |
          export INPUT_TOKEN=${{ secrets.NPM_ACCESS_TOKEN }}
          npm whoami
          npm dist-tag add @trivir/frodo-cli@${{ needs.build.outputs.newVersion }} next

  macos-binary-release:
    needs: [build, smoke-tests]
    runs-on: macos-latest
    timeout-minutes: 15
    steps:
      - name: Install the Apple certificate
        env:
          DEVELOPMENT_CERTIFICATE_DATA: ${{ secrets.DEVELOPMENT_CERTIFICATE_DATA }}
          DEVELOPMENT_CERTIFICATE_PASSPHRASE: ${{ secrets.DEVELOPMENT_CERTIFICATE_PASSPHRASE }}
          INTERMEDIATE_CERTIFICATE_DATA: ${{ secrets.INTERMEDIATE_CERTIFICATE_DATA }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          INTERMEDIATE_CERTIFICATE_PATH=$RUNNER_TEMP/intermediate_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificates from secrets
          echo -n "$DEVELOPMENT_CERTIFICATE_DATA" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$INTERMEDIATE_CERTIFICATE_DATA" | base64 --decode --output $INTERMEDIATE_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$DEVELOPMENT_CERTIFICATE_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          #security import $INTERMEDIATE_CERTIFICATE_PATH -P "$DEVELOPMENT_CERTIFICATE_PASSPHRASE" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - uses: actions/download-artifact@v3
        with:
          name: build

      - name: Install root dependencies
        run: npm ci

      - name: Install dist dependencies
        run: npm run dist-install

      - name: Build
        run: npm run dist-pkg

      #
      # Fail early on failing tests.
      #
      - name: 'Test'
        run: |
          dist/bin/frodo -v
          dist/bin/frodo journey -h
          dist/bin/frodo journey export -h

      #
      # Re-sign the application with the "Developer ID" certificate.
      #
      - name: Sign distribution binary
        working-directory: ./dist/bin
        run: "codesign -f -s 'Developer ID Application' --timestamp --deep frodo"
        # run: "codesign -f -s 'Developer ID Application: Volker Scheuber (AV6L99G8W9)' --timestamp --deep frodo"

      #
      # Zip up the app and add it to the GitHub Release as a
      # downloadable asset.
      #

      - name: Package for Distribution
        run: ditto -V -c -k --keepParent "dist/bin/frodo" "dist/frodo-macos-${{ needs.build.outputs.newVersion }}.zip"

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/frodo-macos-${{ needs.build.outputs.newVersion }}.zip

  linux-binary-release:
    needs: [build, smoke-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - uses: actions/download-artifact@v3
        with:
          name: build

      - name: Install root dependencies
        run: npm ci

      - name: Install dist dependencies
        run: npm run dist-install

      - name: Build
        run: npm run dist-pkg

      #
      # Fail early on failing tests.
      #
      - name: 'Test'
        run: |
          dist/bin/frodo -v
          dist/bin/frodo journey -h
          dist/bin/frodo journey export -h

      - name: Archive distribution binary
        run: zip -r -Z bzip2 dist/frodo-linux-${{ needs.build.outputs.newVersion }}.zip . -i dist/bin/frodo

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/frodo-linux-${{ needs.build.outputs.newVersion }}.zip

  linux-arm64-binary-release:
    if: false
    needs: [build, smoke-tests]
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - uses: actions/download-artifact@v3
        with:
          name: build

      - name: Install root dependencies
        run: npm ci

      - name: Install dist dependencies
        run: npm run dist-install

      - name: Build
        run: npm run dist-pkg

      #
      # Fail early on failing tests.
      #
      - name: 'Test'
        run: |
          dist/bin/frodo -v
          dist/bin/frodo journey -h
          dist/bin/frodo journey export -h

      - name: Archive distribution binary
        run: zip -r -Z bzip2 dist/frodo-linux-arm64-${{ needs.build.outputs.newVersion }}.zip . -i dist/bin/frodo

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/frodo-linux-arm64-${{ needs.build.outputs.newVersion }}.zip

  windows-binary-release:
    needs: [build, smoke-tests]
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - uses: actions/download-artifact@v3
        with:
          name: build

      - name: Install root dependencies
        run: npm ci

      - name: Install dist dependencies
        run: npm run dist-install

      - name: Build
        run: npm run dist-pkg

      #
      # Fail early on failing tests.
      #
      - name: 'Test'
        run: |
          dist/bin/frodo.exe -v
          dist/bin/frodo.exe journey -h
          dist/bin/frodo.exe journey export -h

      - name: Archive distribution binary
        run: 7z a -tzip dist/frodo-win-${{ needs.build.outputs.newVersion }}.zip dist/bin/frodo.exe

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/frodo-win-${{ needs.build.outputs.newVersion }}.zip
