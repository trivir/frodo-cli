// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`frodo saml export "frodo saml export --all --file my-allAlphaProviders.saml.json": should export all saml providers to a single file named my-allAlphaProviders.saml.json 1`] = `
"AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "f30717c7ec52ff5fe13dfa0ba3bd0962",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=sales-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=sales-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "f30717c7ec52ff5fe13dfa0ba3bd0962",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "3e2c66f09e595edbe4719f89b2142c68",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=engineering-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=engineering-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "3e2c66f09e595edbe4719f89b2142c68",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "5ac34b58b606e7c3d035917a23af91d5",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "5ac34b58b606e7c3d035917a23af91d5",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "973a9da1c7a852d87e1e7564be03f4c7",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=company-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=company-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "973a9da1c7a852d87e1e7564be03f4c7",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "479848461a59bc6e745d07bcc9f0335f",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=iSPAzure&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=iSPAzure&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "479848461a59bc6e745d07bcc9f0335f",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "0dc3a05189e2726e15b256ff2d916027",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=benefits-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=benefits-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-7ae3e546-3b2c-4c8e-b42f-5d8137d6bd04",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "0dc3a05189e2726e15b256ff2d916027",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
"
`;

exports[`frodo saml export "frodo saml export --all --file my-allAlphaProviders.saml.json": should export all saml providers to a single file named my-allAlphaProviders.saml.json: ./my-allAlphaProviders.saml.json 1`] = `
{
  "meta": Any<Object>,
  "saml": {
    "hosted": {
      "Y29tcGFueS1JRFA": {
        "_id": "Y29tcGFueS1JRFA",
        "entityId": "company-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/company",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/company",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/company",
              },
            ],
            "metaAlias": "/alpha/company",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/company",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/company",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/company",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/company",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/company",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/company",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/company",
                },
              ],
            },
          },
        },
      },
      "YmVuZWZpdHMtSURQ": {
        "_id": "YmVuZWZpdHMtSURQ",
        "entityId": "benefits-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/benefits",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/benefits",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/benefits",
              },
            ],
            "metaAlias": "/alpha/benefits",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/benefits",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/benefits",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/benefits",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/benefits",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/benefits",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/benefits",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/benefits",
                },
              ],
            },
          },
        },
      },
      "ZW5naW5lZXJpbmctSURQ": {
        "_id": "ZW5naW5lZXJpbmctSURQ",
        "entityId": "engineering-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/engineering",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/engineering",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/engineering",
              },
            ],
            "metaAlias": "/alpha/engineering",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/engineering",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/engineering",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/engineering",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/engineering",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/engineering",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/engineering",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/engineering",
                },
              ],
            },
          },
        },
      },
      "aVNQQXp1cmU": {
        "_id": "aVNQQXp1cmU",
        "entityId": "iSPAzure",
        "serviceProvider": {
          "advanced": {
            "ecpConfiguration": {
              "ecpRequestIdpListFinderImpl": "com.sun.identity.saml2.plugins.ECPIDPFinder",
            },
            "idpProxy": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "spUrl": "https://idc.scheuber.io/am/spsaehandler/metaAlias/alpha/iSPAzure",
            },
          },
          "assertionContent": {
            "assertionTimeSkew": 300,
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "defaultItem": true,
                  "level": 0,
                },
              ],
              "authenticationComparisonType": "Exact",
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper",
              "includeRequestedAuthenticationContext": true,
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "accountMapping": {
              "spAccountMapper": "com.sun.identity.saml2.plugins.DefaultSPAccountMapper",
              "useNameIDAsSPUserID": true,
            },
            "adapter": {},
            "attributeMapper": {
              "attributeMap": [
                {
                  "key": "http://schemas.microsoft.com/identity/claims/displayname",
                  "value": "cn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                  "value": "givenName",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                  "value": "sn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                  "value": "mail",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                  "value": "uid",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultSPAttributeMapper",
            },
            "autoFederation": {
              "autoFedEnabled": false,
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
            "url": {},
          },
          "services": {
            "metaAlias": "/alpha/iSPAzure",
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/Consumer/ECP/metaAlias/alpha/iSPAzure",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPSloSoap/metaAlias/alpha/iSPAzure",
                },
              ],
            },
          },
        },
      },
      "c2FsZXMtSURQ": {
        "_id": "c2FsZXMtSURQ",
        "entityId": "sales-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/sales",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/sales",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/sales",
              },
            ],
            "metaAlias": "/alpha/sales",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/sales",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/sales",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/sales",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/sales",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/sales",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/sales",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/sales",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {
      "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l": [
        "<?xml version="1.0" encoding="UTF-8" standalone="yes"?>",
        "<EntityDescriptor entityID="urn:federation:MicrosoftOnline" ID="_e46a1193-e8a7-48ed-804f-1516729ecb5f" xmlns="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:query="urn:oasis:names:tc:SAML:metadata:ext:query" xmlns:mdattr="urn:oasis:names:tc:SAML:metadata:attribute" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xenc11="http://www.w3.org/2009/xmlenc11#" xmlns:alg="urn:oasis:names:tc:SAML:metadata:algsupport" xmlns:x509qry="urn:oasis:names:tc:SAML:metadata:X509:query" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">",
        "    <Extensions>",
        "        <alg:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>",
        "        <alg:SigningMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>",
        "    </Extensions>",
        "    <SPSSODescriptor WantAssertionsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQbgDHfi3t1JNGVqwD5/7lmjANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjAxMjIxMDAwMDAwWhcNMjUxMjIx",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFT0/0/2qQurnYa0LbJHF9YYozhEH6r9mCxVDBYbew",
        "SG4tGgrWpsewQ/96pcczGMQctMvU+h2eX38Hx/f9JAIDbuRQzQlsPhQS7DDZ6WlTXU+t8d/g2C7f",
        "pSoLs4KVdJih4xyjLUWj+BK/ijsRjBt4Riw9VbJH/DdWKyoSMbECEiE+s1RtLP/eYoMmNfxyQGqW",
        "irCNqVNBTlqzYQp4dgF0foYy4ktoxwmQOVoTcIMFYp1I4pFPI7CxuMLkfK0X7aTbM7YGphvMfJxJ",
        "kjrQdyI7G5d1t4DNi3zkEbBT7FGAr6qPt3Kn9ralpqJKHdpEBA9N0vNwQo5XTYIhUbPQ16IRAgMB",
        "AAGjITAfMB0GA1UdDgQWBBRs7tPmfkksSr67KtElHjYZbeaCTjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "JqwMZSjQJ36x+1sty6EeLKQLQewQwPaEC47Zut+8bXed6Q8jMZ0bfa/MM7XquEcabaMZLQuKLft4",
        "4YXwXXQOfQrI2qjQr3eToJFlDT9hR0rfp9wQqttDxd6Aa6RWwDTgo5oKUQCTKLHhEy8uWzScK0eG",
        "t2d7TWTaDXjRSwNq6tM7fRhZs07tKBV3xfi9EQy/mlavAMFRBVm86NSo7AsOG1IOMq03U3ooCWAX",
        "h9PdvvHNfHhH19futAnC/HeOjwRF1Qc527aBMphYFQLdiThfmfmiE/AhQqCwZ2oE7uCJhBtR+Kb1",
        "ZGhjI35pHfsSqGiFa7Kr+5ave822PDcke89Mvg==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQN/GPegnT8blP2EcSdMMbBzANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjEwMjE4MDAwMDAwWhcNMjYwMjE4",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDXdLGU2Ll5RPdDUnKQ+f/HS5qiTay2cCh9U2AS6oDM",
        "6SOxVhYGtoeJ1VPebcLnpgLfhPxzrwWoVzXSEF+VRQbnYID2Jb4khjgyEeoThk3VqrThwhahpSbB",
        "g2vo06vIOp1TS2R1BiwHKTLoB1i1IJnaIFSC3BN6pY4flXWyLQt/5ABXElv2XZLqXM9Eefj6Ji40",
        "nLIsiW4dWw3BDa/ywWW0MsiW5ojGq4vovcAgENe/4NUbju70gHP/WS5D9bW5p+OIQi7/unrlWe/h",
        "3A6jtBbbRlXYXlN+Z22uTTyyCD/W8zeXaACLvHagwEMrQePDXBZqc/iX2kI+ooZr1sC/H39RAgMB",
        "AAGjITAfMB0GA1UdDgQWBBSrX2dm3LwT9jb/p+bAAdYQpE+/NjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "eqJfYHnsA9qhGttXFfFpPW4DQLh5w6JCce7vGvWINr5fr1DnQdcOr+wwjQ/tqbckAL2v6z1AqjhS",
        "78kbfegnAQDwioJZ1olYYvLOxKoa6HF+b1/p0Mlub8Zukk2n1b2lKPBBOibOasSY7gQDwlIZi7tl",
        "9nMTxUfdYK+E5Axv7DVnmUCwcnnpV5/1SFdNyW2kWO4C68rrjMOvECfwrKkbfVJM8f9krEUBuoBF",
        "8dTDv7D2ZM4Q2buC70NbfaNWUX0yFvKI0IuTqk8RBfGTRQ4fZAbhMPaykEpBu6dNjTi5YOa0lNqF",
        "GS7Ax7leCh5x9lV8elcLkXs8ySo8AOQJk0hgIw==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQN/GPegnT8blP2EcSdMMbBzANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjEwMjE4MDAwMDAwWhcNMjYwMjE4",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDXdLGU2Ll5RPdDUnKQ+f/HS5qiTay2cCh9U2AS6oDM",
        "6SOxVhYGtoeJ1VPebcLnpgLfhPxzrwWoVzXSEF+VRQbnYID2Jb4khjgyEeoThk3VqrThwhahpSbB",
        "g2vo06vIOp1TS2R1BiwHKTLoB1i1IJnaIFSC3BN6pY4flXWyLQt/5ABXElv2XZLqXM9Eefj6Ji40",
        "nLIsiW4dWw3BDa/ywWW0MsiW5ojGq4vovcAgENe/4NUbju70gHP/WS5D9bW5p+OIQi7/unrlWe/h",
        "3A6jtBbbRlXYXlN+Z22uTTyyCD/W8zeXaACLvHagwEMrQePDXBZqc/iX2kI+ooZr1sC/H39RAgMB",
        "AAGjITAfMB0GA1UdDgQWBBSrX2dm3LwT9jb/p+bAAdYQpE+/NjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "eqJfYHnsA9qhGttXFfFpPW4DQLh5w6JCce7vGvWINr5fr1DnQdcOr+wwjQ/tqbckAL2v6z1AqjhS",
        "78kbfegnAQDwioJZ1olYYvLOxKoa6HF+b1/p0Mlub8Zukk2n1b2lKPBBOibOasSY7gQDwlIZi7tl",
        "9nMTxUfdYK+E5Axv7DVnmUCwcnnpV5/1SFdNyW2kWO4C68rrjMOvECfwrKkbfVJM8f9krEUBuoBF",
        "8dTDv7D2ZM4Q2buC70NbfaNWUX0yFvKI0IuTqk8RBfGTRQ4fZAbhMPaykEpBu6dNjTi5YOa0lNqF",
        "GS7Ax7leCh5x9lV8elcLkXs8ySo8AOQJk0hgIw==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>",
        "        <NameIDFormat>urn:mace:shibboleth:1.0:nameIdentifier</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</NameIDFormat>",
        "        <AssertionConsumerService index="0" isDefault="true" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <AssertionConsumerService index="1" isDefault="false" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <AssertionConsumerService index="2" isDefault="false" Binding="urn:oasis:names:tc:SAML:2.0:bindings:PAOS" Location="https://login.microsoftonline.com/login.srf"/>",
        "    </SPSSODescriptor>",
        "</EntityDescriptor>",
        "",
        "",
      ],
    },
    "remote": {
      "aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzExZmZhOWMtNTk3Mi00NzEzLWFjZTMtNjg4Yzk3MzI2MTRhLw": {
        "_id": "aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzExZmZhOWMtNTk3Mi00NzEzLWFjZTMtNjg4Yzk3MzI2MTRhLw",
        "entityId": "https://sts.windows.net/711ffa9c-5972-4713-ace3-688c9732614a/",
        "identityProvider": {
          "assertionContent": {
            "basicAuthentication": {},
            "nameIdFormat": {},
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "services": {
            "serviceAttributes": {
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
              ],
            },
          },
        },
      },
      "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l": {
        "_id": "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l",
        "entityId": "urn:federation:MicrosoftOnline",
        "serviceProvider": {
          "advanced": {
            "idpProxy": {},
            "saeConfiguration": {},
          },
          "assertionContent": {
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:mace:shibboleth:1.0:nameIdentifier",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {
                "assertion": true,
              },
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "IDPEmail",
                },
                {
                  "binary": false,
                  "localAttribute": "UOPClassID",
                  "samlAttribute": "UOPClassID",
                },
              ],
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
          },
          "services": {
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://login.microsoftonline.com/login.srf",
                },
              ],
            },
          },
        },
      },
    },
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export --all-separate --sort --no-metadata --directory samlExportTestDir3": should export all saml providers to separate files in the directory samlExportTestDir3 1`] = `""`;

exports[`frodo saml export "frodo saml export --all-separate --sort --no-metadata --directory samlExportTestDir3": should export all saml providers to separate files in the directory samlExportTestDir3: samlExportTestDir3/benefits-IDP.saml.json 1`] = `
{
  "saml": {
    "hosted": {
      "YmVuZWZpdHMtSURQ": {
        "_id": "YmVuZWZpdHMtSURQ",
        "entityId": "benefits-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/benefits",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/benefits",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/benefits",
              },
            ],
            "metaAlias": "/alpha/benefits",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/benefits",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/benefits",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/benefits",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/benefits",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/benefits",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/benefits",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/benefits",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {},
    "remote": {},
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export --all-separate --sort --no-metadata --directory samlExportTestDir3": should export all saml providers to separate files in the directory samlExportTestDir3: samlExportTestDir3/company-IDP.saml.json 1`] = `
{
  "saml": {
    "hosted": {
      "Y29tcGFueS1JRFA": {
        "_id": "Y29tcGFueS1JRFA",
        "entityId": "company-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/company",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/company",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/company",
              },
            ],
            "metaAlias": "/alpha/company",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/company",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/company",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/company",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/company",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/company",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/company",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/company",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {},
    "remote": {},
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export --all-separate --sort --no-metadata --directory samlExportTestDir3": should export all saml providers to separate files in the directory samlExportTestDir3: samlExportTestDir3/engineering-IDP.saml.json 1`] = `
{
  "saml": {
    "hosted": {
      "ZW5naW5lZXJpbmctSURQ": {
        "_id": "ZW5naW5lZXJpbmctSURQ",
        "entityId": "engineering-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/engineering",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/engineering",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/engineering",
              },
            ],
            "metaAlias": "/alpha/engineering",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/engineering",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/engineering",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/engineering",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/engineering",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/engineering",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/engineering",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/engineering",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {},
    "remote": {},
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export --all-separate --sort --no-metadata --directory samlExportTestDir3": should export all saml providers to separate files in the directory samlExportTestDir3: samlExportTestDir3/iSPAzure.saml.json 1`] = `
{
  "saml": {
    "hosted": {
      "aVNQQXp1cmU": {
        "_id": "aVNQQXp1cmU",
        "entityId": "iSPAzure",
        "serviceProvider": {
          "advanced": {
            "ecpConfiguration": {
              "ecpRequestIdpListFinderImpl": "com.sun.identity.saml2.plugins.ECPIDPFinder",
            },
            "idpProxy": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "spUrl": "https://idc.scheuber.io/am/spsaehandler/metaAlias/alpha/iSPAzure",
            },
          },
          "assertionContent": {
            "assertionTimeSkew": 300,
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "defaultItem": true,
                  "level": 0,
                },
              ],
              "authenticationComparisonType": "Exact",
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper",
              "includeRequestedAuthenticationContext": true,
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "accountMapping": {
              "spAccountMapper": "com.sun.identity.saml2.plugins.DefaultSPAccountMapper",
              "useNameIDAsSPUserID": true,
            },
            "adapter": {},
            "attributeMapper": {
              "attributeMap": [
                {
                  "key": "http://schemas.microsoft.com/identity/claims/displayname",
                  "value": "cn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                  "value": "givenName",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                  "value": "sn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                  "value": "mail",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                  "value": "uid",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultSPAttributeMapper",
            },
            "autoFederation": {
              "autoFedEnabled": false,
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
            "url": {},
          },
          "services": {
            "metaAlias": "/alpha/iSPAzure",
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/Consumer/ECP/metaAlias/alpha/iSPAzure",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPSloSoap/metaAlias/alpha/iSPAzure",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {},
    "remote": {},
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export --all-separate --sort --no-metadata --directory samlExportTestDir3": should export all saml providers to separate files in the directory samlExportTestDir3: samlExportTestDir3/sales-IDP.saml.json 1`] = `
{
  "saml": {
    "hosted": {
      "c2FsZXMtSURQ": {
        "_id": "c2FsZXMtSURQ",
        "entityId": "sales-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/sales",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/sales",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/sales",
              },
            ],
            "metaAlias": "/alpha/sales",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/sales",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/sales",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/sales",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/sales",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/sales",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/sales",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/sales",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {},
    "remote": {},
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export --all-separate --sort --no-metadata --directory samlExportTestDir3": should export all saml providers to separate files in the directory samlExportTestDir3: samlExportTestDir3/sts.windows.net711ffa9c-5972-4713-ace3-688c9732614a.saml.json 1`] = `
{
  "saml": {
    "hosted": {},
    "metadata": {},
    "remote": {
      "aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzExZmZhOWMtNTk3Mi00NzEzLWFjZTMtNjg4Yzk3MzI2MTRhLw": {
        "_id": "aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzExZmZhOWMtNTk3Mi00NzEzLWFjZTMtNjg4Yzk3MzI2MTRhLw",
        "entityId": "https://sts.windows.net/711ffa9c-5972-4713-ace3-688c9732614a/",
        "identityProvider": {
          "assertionContent": {
            "basicAuthentication": {},
            "nameIdFormat": {},
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "services": {
            "serviceAttributes": {
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
              ],
            },
          },
        },
      },
    },
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export --all-separate --sort --no-metadata --directory samlExportTestDir3": should export all saml providers to separate files in the directory samlExportTestDir3: samlExportTestDir3/urnfederationMicrosoftOnline.saml.json 1`] = `
{
  "saml": {
    "hosted": {},
    "metadata": {
      "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l": [
        "<?xml version="1.0" encoding="UTF-8" standalone="yes"?>",
        "<EntityDescriptor entityID="urn:federation:MicrosoftOnline" ID="_e46a1193-e8a7-48ed-804f-1516729ecb5f" xmlns="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:query="urn:oasis:names:tc:SAML:metadata:ext:query" xmlns:mdattr="urn:oasis:names:tc:SAML:metadata:attribute" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xenc11="http://www.w3.org/2009/xmlenc11#" xmlns:alg="urn:oasis:names:tc:SAML:metadata:algsupport" xmlns:x509qry="urn:oasis:names:tc:SAML:metadata:X509:query" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">",
        "    <Extensions>",
        "        <alg:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>",
        "        <alg:SigningMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>",
        "    </Extensions>",
        "    <SPSSODescriptor WantAssertionsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQbgDHfi3t1JNGVqwD5/7lmjANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjAxMjIxMDAwMDAwWhcNMjUxMjIx",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFT0/0/2qQurnYa0LbJHF9YYozhEH6r9mCxVDBYbew",
        "SG4tGgrWpsewQ/96pcczGMQctMvU+h2eX38Hx/f9JAIDbuRQzQlsPhQS7DDZ6WlTXU+t8d/g2C7f",
        "pSoLs4KVdJih4xyjLUWj+BK/ijsRjBt4Riw9VbJH/DdWKyoSMbECEiE+s1RtLP/eYoMmNfxyQGqW",
        "irCNqVNBTlqzYQp4dgF0foYy4ktoxwmQOVoTcIMFYp1I4pFPI7CxuMLkfK0X7aTbM7YGphvMfJxJ",
        "kjrQdyI7G5d1t4DNi3zkEbBT7FGAr6qPt3Kn9ralpqJKHdpEBA9N0vNwQo5XTYIhUbPQ16IRAgMB",
        "AAGjITAfMB0GA1UdDgQWBBRs7tPmfkksSr67KtElHjYZbeaCTjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "JqwMZSjQJ36x+1sty6EeLKQLQewQwPaEC47Zut+8bXed6Q8jMZ0bfa/MM7XquEcabaMZLQuKLft4",
        "4YXwXXQOfQrI2qjQr3eToJFlDT9hR0rfp9wQqttDxd6Aa6RWwDTgo5oKUQCTKLHhEy8uWzScK0eG",
        "t2d7TWTaDXjRSwNq6tM7fRhZs07tKBV3xfi9EQy/mlavAMFRBVm86NSo7AsOG1IOMq03U3ooCWAX",
        "h9PdvvHNfHhH19futAnC/HeOjwRF1Qc527aBMphYFQLdiThfmfmiE/AhQqCwZ2oE7uCJhBtR+Kb1",
        "ZGhjI35pHfsSqGiFa7Kr+5ave822PDcke89Mvg==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQN/GPegnT8blP2EcSdMMbBzANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjEwMjE4MDAwMDAwWhcNMjYwMjE4",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDXdLGU2Ll5RPdDUnKQ+f/HS5qiTay2cCh9U2AS6oDM",
        "6SOxVhYGtoeJ1VPebcLnpgLfhPxzrwWoVzXSEF+VRQbnYID2Jb4khjgyEeoThk3VqrThwhahpSbB",
        "g2vo06vIOp1TS2R1BiwHKTLoB1i1IJnaIFSC3BN6pY4flXWyLQt/5ABXElv2XZLqXM9Eefj6Ji40",
        "nLIsiW4dWw3BDa/ywWW0MsiW5ojGq4vovcAgENe/4NUbju70gHP/WS5D9bW5p+OIQi7/unrlWe/h",
        "3A6jtBbbRlXYXlN+Z22uTTyyCD/W8zeXaACLvHagwEMrQePDXBZqc/iX2kI+ooZr1sC/H39RAgMB",
        "AAGjITAfMB0GA1UdDgQWBBSrX2dm3LwT9jb/p+bAAdYQpE+/NjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "eqJfYHnsA9qhGttXFfFpPW4DQLh5w6JCce7vGvWINr5fr1DnQdcOr+wwjQ/tqbckAL2v6z1AqjhS",
        "78kbfegnAQDwioJZ1olYYvLOxKoa6HF+b1/p0Mlub8Zukk2n1b2lKPBBOibOasSY7gQDwlIZi7tl",
        "9nMTxUfdYK+E5Axv7DVnmUCwcnnpV5/1SFdNyW2kWO4C68rrjMOvECfwrKkbfVJM8f9krEUBuoBF",
        "8dTDv7D2ZM4Q2buC70NbfaNWUX0yFvKI0IuTqk8RBfGTRQ4fZAbhMPaykEpBu6dNjTi5YOa0lNqF",
        "GS7Ax7leCh5x9lV8elcLkXs8ySo8AOQJk0hgIw==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQN/GPegnT8blP2EcSdMMbBzANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjEwMjE4MDAwMDAwWhcNMjYwMjE4",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDXdLGU2Ll5RPdDUnKQ+f/HS5qiTay2cCh9U2AS6oDM",
        "6SOxVhYGtoeJ1VPebcLnpgLfhPxzrwWoVzXSEF+VRQbnYID2Jb4khjgyEeoThk3VqrThwhahpSbB",
        "g2vo06vIOp1TS2R1BiwHKTLoB1i1IJnaIFSC3BN6pY4flXWyLQt/5ABXElv2XZLqXM9Eefj6Ji40",
        "nLIsiW4dWw3BDa/ywWW0MsiW5ojGq4vovcAgENe/4NUbju70gHP/WS5D9bW5p+OIQi7/unrlWe/h",
        "3A6jtBbbRlXYXlN+Z22uTTyyCD/W8zeXaACLvHagwEMrQePDXBZqc/iX2kI+ooZr1sC/H39RAgMB",
        "AAGjITAfMB0GA1UdDgQWBBSrX2dm3LwT9jb/p+bAAdYQpE+/NjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "eqJfYHnsA9qhGttXFfFpPW4DQLh5w6JCce7vGvWINr5fr1DnQdcOr+wwjQ/tqbckAL2v6z1AqjhS",
        "78kbfegnAQDwioJZ1olYYvLOxKoa6HF+b1/p0Mlub8Zukk2n1b2lKPBBOibOasSY7gQDwlIZi7tl",
        "9nMTxUfdYK+E5Axv7DVnmUCwcnnpV5/1SFdNyW2kWO4C68rrjMOvECfwrKkbfVJM8f9krEUBuoBF",
        "8dTDv7D2ZM4Q2buC70NbfaNWUX0yFvKI0IuTqk8RBfGTRQ4fZAbhMPaykEpBu6dNjTi5YOa0lNqF",
        "GS7Ax7leCh5x9lV8elcLkXs8ySo8AOQJk0hgIw==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>",
        "        <NameIDFormat>urn:mace:shibboleth:1.0:nameIdentifier</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</NameIDFormat>",
        "        <AssertionConsumerService index="0" isDefault="true" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <AssertionConsumerService index="1" isDefault="false" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <AssertionConsumerService index="2" isDefault="false" Binding="urn:oasis:names:tc:SAML:2.0:bindings:PAOS" Location="https://login.microsoftonline.com/login.srf"/>",
        "    </SPSSODescriptor>",
        "</EntityDescriptor>",
        "",
        "",
      ],
    },
    "remote": {
      "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l": {
        "_id": "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l",
        "entityId": "urn:federation:MicrosoftOnline",
        "serviceProvider": {
          "advanced": {
            "idpProxy": {},
            "saeConfiguration": {},
          },
          "assertionContent": {
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:mace:shibboleth:1.0:nameIdentifier",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {
                "assertion": true,
              },
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "IDPEmail",
                },
                {
                  "binary": false,
                  "localAttribute": "UOPClassID",
                  "samlAttribute": "UOPClassID",
                },
              ],
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
          },
          "services": {
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://login.microsoftonline.com/login.srf",
                },
              ],
            },
          },
        },
      },
    },
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export --entity-id iSPAzure": should export the saml provider with entity id "iSPAzure" 1`] = `""`;

exports[`frodo saml export "frodo saml export --entity-id iSPAzure": should export the saml provider with entity id "iSPAzure": ./iSPAzure.saml.json 1`] = `
{
  "meta": Any<Object>,
  "saml": {
    "hosted": {
      "aVNQQXp1cmU": {
        "_id": "aVNQQXp1cmU",
        "entityId": "iSPAzure",
        "serviceProvider": {
          "advanced": {
            "ecpConfiguration": {
              "ecpRequestIdpListFinderImpl": "com.sun.identity.saml2.plugins.ECPIDPFinder",
            },
            "idpProxy": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "spUrl": "https://idc.scheuber.io/am/spsaehandler/metaAlias/alpha/iSPAzure",
            },
          },
          "assertionContent": {
            "assertionTimeSkew": 300,
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "defaultItem": true,
                  "level": 0,
                },
              ],
              "authenticationComparisonType": "Exact",
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper",
              "includeRequestedAuthenticationContext": true,
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "accountMapping": {
              "spAccountMapper": "com.sun.identity.saml2.plugins.DefaultSPAccountMapper",
              "useNameIDAsSPUserID": true,
            },
            "adapter": {},
            "attributeMapper": {
              "attributeMap": [
                {
                  "key": "http://schemas.microsoft.com/identity/claims/displayname",
                  "value": "cn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                  "value": "givenName",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                  "value": "sn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                  "value": "mail",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                  "value": "uid",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultSPAttributeMapper",
            },
            "autoFederation": {
              "autoFedEnabled": false,
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
            "url": {},
          },
          "services": {
            "metaAlias": "/alpha/iSPAzure",
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/Consumer/ECP/metaAlias/alpha/iSPAzure",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPSloSoap/metaAlias/alpha/iSPAzure",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {},
    "remote": {},
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export -A": should export all saml providers to separate files 1`] = `""`;

exports[`frodo saml export "frodo saml export -A": should export all saml providers to separate files: ./iSPAzure.saml.json 1`] = `
{
  "meta": Any<Object>,
  "saml": {
    "hosted": {
      "aVNQQXp1cmU": {
        "_id": "aVNQQXp1cmU",
        "entityId": "iSPAzure",
        "serviceProvider": {
          "advanced": {
            "ecpConfiguration": {
              "ecpRequestIdpListFinderImpl": "com.sun.identity.saml2.plugins.ECPIDPFinder",
            },
            "idpProxy": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "spUrl": "https://idc.scheuber.io/am/spsaehandler/metaAlias/alpha/iSPAzure",
            },
          },
          "assertionContent": {
            "assertionTimeSkew": 300,
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "defaultItem": true,
                  "level": 0,
                },
              ],
              "authenticationComparisonType": "Exact",
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper",
              "includeRequestedAuthenticationContext": true,
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "accountMapping": {
              "spAccountMapper": "com.sun.identity.saml2.plugins.DefaultSPAccountMapper",
              "useNameIDAsSPUserID": true,
            },
            "adapter": {},
            "attributeMapper": {
              "attributeMap": [
                {
                  "key": "http://schemas.microsoft.com/identity/claims/displayname",
                  "value": "cn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                  "value": "givenName",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                  "value": "sn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                  "value": "mail",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                  "value": "uid",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultSPAttributeMapper",
            },
            "autoFederation": {
              "autoFedEnabled": false,
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
            "url": {},
          },
          "services": {
            "metaAlias": "/alpha/iSPAzure",
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/Consumer/ECP/metaAlias/alpha/iSPAzure",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPSloSoap/metaAlias/alpha/iSPAzure",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {},
    "remote": {},
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export -A": should export all saml providers to separate files: ./sts.windows.net711ffa9c-5972-4713-ace3-688c9732614a.saml.json 1`] = `
{
  "meta": Any<Object>,
  "saml": {
    "hosted": {},
    "metadata": {},
    "remote": {
      "aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzExZmZhOWMtNTk3Mi00NzEzLWFjZTMtNjg4Yzk3MzI2MTRhLw": {
        "_id": "aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzExZmZhOWMtNTk3Mi00NzEzLWFjZTMtNjg4Yzk3MzI2MTRhLw",
        "entityId": "https://sts.windows.net/711ffa9c-5972-4713-ace3-688c9732614a/",
        "identityProvider": {
          "assertionContent": {
            "basicAuthentication": {},
            "nameIdFormat": {},
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "services": {
            "serviceAttributes": {
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
              ],
            },
          },
        },
      },
    },
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export -A": should export all saml providers to separate files: ./urnfederationMicrosoftOnline.saml.json 1`] = `
{
  "meta": Any<Object>,
  "saml": {
    "hosted": {},
    "metadata": {
      "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l": [
        "<?xml version="1.0" encoding="UTF-8" standalone="yes"?>",
        "<EntityDescriptor entityID="urn:federation:MicrosoftOnline" ID="_e46a1193-e8a7-48ed-804f-1516729ecb5f" xmlns="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:query="urn:oasis:names:tc:SAML:metadata:ext:query" xmlns:mdattr="urn:oasis:names:tc:SAML:metadata:attribute" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xenc11="http://www.w3.org/2009/xmlenc11#" xmlns:alg="urn:oasis:names:tc:SAML:metadata:algsupport" xmlns:x509qry="urn:oasis:names:tc:SAML:metadata:X509:query" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">",
        "    <Extensions>",
        "        <alg:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>",
        "        <alg:SigningMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>",
        "    </Extensions>",
        "    <SPSSODescriptor WantAssertionsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQbgDHfi3t1JNGVqwD5/7lmjANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjAxMjIxMDAwMDAwWhcNMjUxMjIx",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFT0/0/2qQurnYa0LbJHF9YYozhEH6r9mCxVDBYbew",
        "SG4tGgrWpsewQ/96pcczGMQctMvU+h2eX38Hx/f9JAIDbuRQzQlsPhQS7DDZ6WlTXU+t8d/g2C7f",
        "pSoLs4KVdJih4xyjLUWj+BK/ijsRjBt4Riw9VbJH/DdWKyoSMbECEiE+s1RtLP/eYoMmNfxyQGqW",
        "irCNqVNBTlqzYQp4dgF0foYy4ktoxwmQOVoTcIMFYp1I4pFPI7CxuMLkfK0X7aTbM7YGphvMfJxJ",
        "kjrQdyI7G5d1t4DNi3zkEbBT7FGAr6qPt3Kn9ralpqJKHdpEBA9N0vNwQo5XTYIhUbPQ16IRAgMB",
        "AAGjITAfMB0GA1UdDgQWBBRs7tPmfkksSr67KtElHjYZbeaCTjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "JqwMZSjQJ36x+1sty6EeLKQLQewQwPaEC47Zut+8bXed6Q8jMZ0bfa/MM7XquEcabaMZLQuKLft4",
        "4YXwXXQOfQrI2qjQr3eToJFlDT9hR0rfp9wQqttDxd6Aa6RWwDTgo5oKUQCTKLHhEy8uWzScK0eG",
        "t2d7TWTaDXjRSwNq6tM7fRhZs07tKBV3xfi9EQy/mlavAMFRBVm86NSo7AsOG1IOMq03U3ooCWAX",
        "h9PdvvHNfHhH19futAnC/HeOjwRF1Qc527aBMphYFQLdiThfmfmiE/AhQqCwZ2oE7uCJhBtR+Kb1",
        "ZGhjI35pHfsSqGiFa7Kr+5ave822PDcke89Mvg==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQN/GPegnT8blP2EcSdMMbBzANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjEwMjE4MDAwMDAwWhcNMjYwMjE4",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDXdLGU2Ll5RPdDUnKQ+f/HS5qiTay2cCh9U2AS6oDM",
        "6SOxVhYGtoeJ1VPebcLnpgLfhPxzrwWoVzXSEF+VRQbnYID2Jb4khjgyEeoThk3VqrThwhahpSbB",
        "g2vo06vIOp1TS2R1BiwHKTLoB1i1IJnaIFSC3BN6pY4flXWyLQt/5ABXElv2XZLqXM9Eefj6Ji40",
        "nLIsiW4dWw3BDa/ywWW0MsiW5ojGq4vovcAgENe/4NUbju70gHP/WS5D9bW5p+OIQi7/unrlWe/h",
        "3A6jtBbbRlXYXlN+Z22uTTyyCD/W8zeXaACLvHagwEMrQePDXBZqc/iX2kI+ooZr1sC/H39RAgMB",
        "AAGjITAfMB0GA1UdDgQWBBSrX2dm3LwT9jb/p+bAAdYQpE+/NjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "eqJfYHnsA9qhGttXFfFpPW4DQLh5w6JCce7vGvWINr5fr1DnQdcOr+wwjQ/tqbckAL2v6z1AqjhS",
        "78kbfegnAQDwioJZ1olYYvLOxKoa6HF+b1/p0Mlub8Zukk2n1b2lKPBBOibOasSY7gQDwlIZi7tl",
        "9nMTxUfdYK+E5Axv7DVnmUCwcnnpV5/1SFdNyW2kWO4C68rrjMOvECfwrKkbfVJM8f9krEUBuoBF",
        "8dTDv7D2ZM4Q2buC70NbfaNWUX0yFvKI0IuTqk8RBfGTRQ4fZAbhMPaykEpBu6dNjTi5YOa0lNqF",
        "GS7Ax7leCh5x9lV8elcLkXs8ySo8AOQJk0hgIw==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQN/GPegnT8blP2EcSdMMbBzANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjEwMjE4MDAwMDAwWhcNMjYwMjE4",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDXdLGU2Ll5RPdDUnKQ+f/HS5qiTay2cCh9U2AS6oDM",
        "6SOxVhYGtoeJ1VPebcLnpgLfhPxzrwWoVzXSEF+VRQbnYID2Jb4khjgyEeoThk3VqrThwhahpSbB",
        "g2vo06vIOp1TS2R1BiwHKTLoB1i1IJnaIFSC3BN6pY4flXWyLQt/5ABXElv2XZLqXM9Eefj6Ji40",
        "nLIsiW4dWw3BDa/ywWW0MsiW5ojGq4vovcAgENe/4NUbju70gHP/WS5D9bW5p+OIQi7/unrlWe/h",
        "3A6jtBbbRlXYXlN+Z22uTTyyCD/W8zeXaACLvHagwEMrQePDXBZqc/iX2kI+ooZr1sC/H39RAgMB",
        "AAGjITAfMB0GA1UdDgQWBBSrX2dm3LwT9jb/p+bAAdYQpE+/NjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "eqJfYHnsA9qhGttXFfFpPW4DQLh5w6JCce7vGvWINr5fr1DnQdcOr+wwjQ/tqbckAL2v6z1AqjhS",
        "78kbfegnAQDwioJZ1olYYvLOxKoa6HF+b1/p0Mlub8Zukk2n1b2lKPBBOibOasSY7gQDwlIZi7tl",
        "9nMTxUfdYK+E5Axv7DVnmUCwcnnpV5/1SFdNyW2kWO4C68rrjMOvECfwrKkbfVJM8f9krEUBuoBF",
        "8dTDv7D2ZM4Q2buC70NbfaNWUX0yFvKI0IuTqk8RBfGTRQ4fZAbhMPaykEpBu6dNjTi5YOa0lNqF",
        "GS7Ax7leCh5x9lV8elcLkXs8ySo8AOQJk0hgIw==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>",
        "        <NameIDFormat>urn:mace:shibboleth:1.0:nameIdentifier</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</NameIDFormat>",
        "        <AssertionConsumerService index="0" isDefault="true" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <AssertionConsumerService index="1" isDefault="false" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <AssertionConsumerService index="2" isDefault="false" Binding="urn:oasis:names:tc:SAML:2.0:bindings:PAOS" Location="https://login.microsoftonline.com/login.srf"/>",
        "    </SPSSODescriptor>",
        "</EntityDescriptor>",
        "",
        "",
      ],
    },
    "remote": {
      "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l": {
        "_id": "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l",
        "entityId": "urn:federation:MicrosoftOnline",
        "serviceProvider": {
          "advanced": {
            "idpProxy": {},
            "saeConfiguration": {},
          },
          "assertionContent": {
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:mace:shibboleth:1.0:nameIdentifier",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {
                "assertion": true,
              },
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "IDPEmail",
                },
                {
                  "binary": false,
                  "localAttribute": "UOPClassID",
                  "samlAttribute": "UOPClassID",
                },
              ],
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
          },
          "services": {
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://login.microsoftonline.com/login.srf",
                },
              ],
            },
          },
        },
      },
    },
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export -SNaD samlExportTestDir2": should export all saml providers to a single file in the directory samlExportTestDir2 1`] = `
"AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "f30717c7ec52ff5fe13dfa0ba3bd0962",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=sales-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=sales-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "f30717c7ec52ff5fe13dfa0ba3bd0962",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "3e2c66f09e595edbe4719f89b2142c68",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=engineering-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=engineering-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "3e2c66f09e595edbe4719f89b2142c68",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "5ac34b58b606e7c3d035917a23af91d5",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "5ac34b58b606e7c3d035917a23af91d5",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "973a9da1c7a852d87e1e7564be03f4c7",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=company-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=company-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "973a9da1c7a852d87e1e7564be03f4c7",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "0dc3a05189e2726e15b256ff2d916027",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=benefits-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=benefits-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "0dc3a05189e2726e15b256ff2d916027",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "479848461a59bc6e745d07bcc9f0335f",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=iSPAzure&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=iSPAzure&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-9c91c591-4753-4943-9927-32bdb9dad098',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-9c91c591-4753-4943-9927-32bdb9dad098",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "479848461a59bc6e745d07bcc9f0335f",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
"
`;

exports[`frodo saml export "frodo saml export -SNaD samlExportTestDir2": should export all saml providers to a single file in the directory samlExportTestDir2: samlExportTestDir2/allAlphaProviders.saml.json 1`] = `
{
  "saml": {
    "hosted": {
      "Y29tcGFueS1JRFA": {
        "_id": "Y29tcGFueS1JRFA",
        "entityId": "company-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/company",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/company",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/company",
              },
            ],
            "metaAlias": "/alpha/company",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/company",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/company",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/company",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/company",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/company",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/company",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/company",
                },
              ],
            },
          },
        },
      },
      "YmVuZWZpdHMtSURQ": {
        "_id": "YmVuZWZpdHMtSURQ",
        "entityId": "benefits-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/benefits",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/benefits",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/benefits",
              },
            ],
            "metaAlias": "/alpha/benefits",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/benefits",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/benefits",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/benefits",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/benefits",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/benefits",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/benefits",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/benefits",
                },
              ],
            },
          },
        },
      },
      "ZW5naW5lZXJpbmctSURQ": {
        "_id": "ZW5naW5lZXJpbmctSURQ",
        "entityId": "engineering-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/engineering",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/engineering",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/engineering",
              },
            ],
            "metaAlias": "/alpha/engineering",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/engineering",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/engineering",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/engineering",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/engineering",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/engineering",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/engineering",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/engineering",
                },
              ],
            },
          },
        },
      },
      "aVNQQXp1cmU": {
        "_id": "aVNQQXp1cmU",
        "entityId": "iSPAzure",
        "serviceProvider": {
          "advanced": {
            "ecpConfiguration": {
              "ecpRequestIdpListFinderImpl": "com.sun.identity.saml2.plugins.ECPIDPFinder",
            },
            "idpProxy": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "spUrl": "https://idc.scheuber.io/am/spsaehandler/metaAlias/alpha/iSPAzure",
            },
          },
          "assertionContent": {
            "assertionTimeSkew": 300,
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "defaultItem": true,
                  "level": 0,
                },
              ],
              "authenticationComparisonType": "Exact",
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper",
              "includeRequestedAuthenticationContext": true,
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "accountMapping": {
              "spAccountMapper": "com.sun.identity.saml2.plugins.DefaultSPAccountMapper",
              "useNameIDAsSPUserID": true,
            },
            "adapter": {},
            "attributeMapper": {
              "attributeMap": [
                {
                  "key": "http://schemas.microsoft.com/identity/claims/displayname",
                  "value": "cn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                  "value": "givenName",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                  "value": "sn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                  "value": "mail",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                  "value": "uid",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultSPAttributeMapper",
            },
            "autoFederation": {
              "autoFedEnabled": false,
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
            "url": {},
          },
          "services": {
            "metaAlias": "/alpha/iSPAzure",
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/Consumer/ECP/metaAlias/alpha/iSPAzure",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPSloSoap/metaAlias/alpha/iSPAzure",
                },
              ],
            },
          },
        },
      },
      "c2FsZXMtSURQ": {
        "_id": "c2FsZXMtSURQ",
        "entityId": "sales-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/sales",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/sales",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/sales",
              },
            ],
            "metaAlias": "/alpha/sales",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/sales",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/sales",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/sales",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/sales",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/sales",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/sales",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/sales",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {
      "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l": [
        "<?xml version="1.0" encoding="UTF-8" standalone="yes"?>",
        "<EntityDescriptor entityID="urn:federation:MicrosoftOnline" ID="_e46a1193-e8a7-48ed-804f-1516729ecb5f" xmlns="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:query="urn:oasis:names:tc:SAML:metadata:ext:query" xmlns:mdattr="urn:oasis:names:tc:SAML:metadata:attribute" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xenc11="http://www.w3.org/2009/xmlenc11#" xmlns:alg="urn:oasis:names:tc:SAML:metadata:algsupport" xmlns:x509qry="urn:oasis:names:tc:SAML:metadata:X509:query" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">",
        "    <Extensions>",
        "        <alg:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>",
        "        <alg:SigningMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>",
        "    </Extensions>",
        "    <SPSSODescriptor WantAssertionsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQbgDHfi3t1JNGVqwD5/7lmjANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjAxMjIxMDAwMDAwWhcNMjUxMjIx",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFT0/0/2qQurnYa0LbJHF9YYozhEH6r9mCxVDBYbew",
        "SG4tGgrWpsewQ/96pcczGMQctMvU+h2eX38Hx/f9JAIDbuRQzQlsPhQS7DDZ6WlTXU+t8d/g2C7f",
        "pSoLs4KVdJih4xyjLUWj+BK/ijsRjBt4Riw9VbJH/DdWKyoSMbECEiE+s1RtLP/eYoMmNfxyQGqW",
        "irCNqVNBTlqzYQp4dgF0foYy4ktoxwmQOVoTcIMFYp1I4pFPI7CxuMLkfK0X7aTbM7YGphvMfJxJ",
        "kjrQdyI7G5d1t4DNi3zkEbBT7FGAr6qPt3Kn9ralpqJKHdpEBA9N0vNwQo5XTYIhUbPQ16IRAgMB",
        "AAGjITAfMB0GA1UdDgQWBBRs7tPmfkksSr67KtElHjYZbeaCTjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "JqwMZSjQJ36x+1sty6EeLKQLQewQwPaEC47Zut+8bXed6Q8jMZ0bfa/MM7XquEcabaMZLQuKLft4",
        "4YXwXXQOfQrI2qjQr3eToJFlDT9hR0rfp9wQqttDxd6Aa6RWwDTgo5oKUQCTKLHhEy8uWzScK0eG",
        "t2d7TWTaDXjRSwNq6tM7fRhZs07tKBV3xfi9EQy/mlavAMFRBVm86NSo7AsOG1IOMq03U3ooCWAX",
        "h9PdvvHNfHhH19futAnC/HeOjwRF1Qc527aBMphYFQLdiThfmfmiE/AhQqCwZ2oE7uCJhBtR+Kb1",
        "ZGhjI35pHfsSqGiFa7Kr+5ave822PDcke89Mvg==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQN/GPegnT8blP2EcSdMMbBzANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjEwMjE4MDAwMDAwWhcNMjYwMjE4",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDXdLGU2Ll5RPdDUnKQ+f/HS5qiTay2cCh9U2AS6oDM",
        "6SOxVhYGtoeJ1VPebcLnpgLfhPxzrwWoVzXSEF+VRQbnYID2Jb4khjgyEeoThk3VqrThwhahpSbB",
        "g2vo06vIOp1TS2R1BiwHKTLoB1i1IJnaIFSC3BN6pY4flXWyLQt/5ABXElv2XZLqXM9Eefj6Ji40",
        "nLIsiW4dWw3BDa/ywWW0MsiW5ojGq4vovcAgENe/4NUbju70gHP/WS5D9bW5p+OIQi7/unrlWe/h",
        "3A6jtBbbRlXYXlN+Z22uTTyyCD/W8zeXaACLvHagwEMrQePDXBZqc/iX2kI+ooZr1sC/H39RAgMB",
        "AAGjITAfMB0GA1UdDgQWBBSrX2dm3LwT9jb/p+bAAdYQpE+/NjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "eqJfYHnsA9qhGttXFfFpPW4DQLh5w6JCce7vGvWINr5fr1DnQdcOr+wwjQ/tqbckAL2v6z1AqjhS",
        "78kbfegnAQDwioJZ1olYYvLOxKoa6HF+b1/p0Mlub8Zukk2n1b2lKPBBOibOasSY7gQDwlIZi7tl",
        "9nMTxUfdYK+E5Axv7DVnmUCwcnnpV5/1SFdNyW2kWO4C68rrjMOvECfwrKkbfVJM8f9krEUBuoBF",
        "8dTDv7D2ZM4Q2buC70NbfaNWUX0yFvKI0IuTqk8RBfGTRQ4fZAbhMPaykEpBu6dNjTi5YOa0lNqF",
        "GS7Ax7leCh5x9lV8elcLkXs8ySo8AOQJk0hgIw==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQN/GPegnT8blP2EcSdMMbBzANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjEwMjE4MDAwMDAwWhcNMjYwMjE4",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDXdLGU2Ll5RPdDUnKQ+f/HS5qiTay2cCh9U2AS6oDM",
        "6SOxVhYGtoeJ1VPebcLnpgLfhPxzrwWoVzXSEF+VRQbnYID2Jb4khjgyEeoThk3VqrThwhahpSbB",
        "g2vo06vIOp1TS2R1BiwHKTLoB1i1IJnaIFSC3BN6pY4flXWyLQt/5ABXElv2XZLqXM9Eefj6Ji40",
        "nLIsiW4dWw3BDa/ywWW0MsiW5ojGq4vovcAgENe/4NUbju70gHP/WS5D9bW5p+OIQi7/unrlWe/h",
        "3A6jtBbbRlXYXlN+Z22uTTyyCD/W8zeXaACLvHagwEMrQePDXBZqc/iX2kI+ooZr1sC/H39RAgMB",
        "AAGjITAfMB0GA1UdDgQWBBSrX2dm3LwT9jb/p+bAAdYQpE+/NjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "eqJfYHnsA9qhGttXFfFpPW4DQLh5w6JCce7vGvWINr5fr1DnQdcOr+wwjQ/tqbckAL2v6z1AqjhS",
        "78kbfegnAQDwioJZ1olYYvLOxKoa6HF+b1/p0Mlub8Zukk2n1b2lKPBBOibOasSY7gQDwlIZi7tl",
        "9nMTxUfdYK+E5Axv7DVnmUCwcnnpV5/1SFdNyW2kWO4C68rrjMOvECfwrKkbfVJM8f9krEUBuoBF",
        "8dTDv7D2ZM4Q2buC70NbfaNWUX0yFvKI0IuTqk8RBfGTRQ4fZAbhMPaykEpBu6dNjTi5YOa0lNqF",
        "GS7Ax7leCh5x9lV8elcLkXs8ySo8AOQJk0hgIw==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>",
        "        <NameIDFormat>urn:mace:shibboleth:1.0:nameIdentifier</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</NameIDFormat>",
        "        <AssertionConsumerService index="0" isDefault="true" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <AssertionConsumerService index="1" isDefault="false" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <AssertionConsumerService index="2" isDefault="false" Binding="urn:oasis:names:tc:SAML:2.0:bindings:PAOS" Location="https://login.microsoftonline.com/login.srf"/>",
        "    </SPSSODescriptor>",
        "</EntityDescriptor>",
        "",
        "",
      ],
    },
    "remote": {
      "aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzExZmZhOWMtNTk3Mi00NzEzLWFjZTMtNjg4Yzk3MzI2MTRhLw": {
        "_id": "aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzExZmZhOWMtNTk3Mi00NzEzLWFjZTMtNjg4Yzk3MzI2MTRhLw",
        "entityId": "https://sts.windows.net/711ffa9c-5972-4713-ace3-688c9732614a/",
        "identityProvider": {
          "assertionContent": {
            "basicAuthentication": {},
            "nameIdFormat": {},
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "services": {
            "serviceAttributes": {
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
              ],
            },
          },
        },
      },
      "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l": {
        "_id": "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l",
        "entityId": "urn:federation:MicrosoftOnline",
        "serviceProvider": {
          "advanced": {
            "idpProxy": {},
            "saeConfiguration": {},
          },
          "assertionContent": {
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:mace:shibboleth:1.0:nameIdentifier",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {
                "assertion": true,
              },
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "IDPEmail",
                },
                {
                  "binary": false,
                  "localAttribute": "UOPClassID",
                  "samlAttribute": "UOPClassID",
                },
              ],
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
          },
          "services": {
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://login.microsoftonline.com/login.srf",
                },
              ],
            },
          },
        },
      },
    },
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export -SNi iSPAzure -D samlExportTestDir1": should export the saml provider with entity id "iSPAzure" into the directory samlExportTestDir1 1`] = `""`;

exports[`frodo saml export "frodo saml export -SNi iSPAzure -D samlExportTestDir1": should export the saml provider with entity id "iSPAzure" into the directory samlExportTestDir1: samlExportTestDir1/iSPAzure.saml.json 1`] = `
{
  "saml": {
    "hosted": {
      "aVNQQXp1cmU": {
        "_id": "aVNQQXp1cmU",
        "entityId": "iSPAzure",
        "serviceProvider": {
          "advanced": {
            "ecpConfiguration": {
              "ecpRequestIdpListFinderImpl": "com.sun.identity.saml2.plugins.ECPIDPFinder",
            },
            "idpProxy": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "spUrl": "https://idc.scheuber.io/am/spsaehandler/metaAlias/alpha/iSPAzure",
            },
          },
          "assertionContent": {
            "assertionTimeSkew": 300,
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "defaultItem": true,
                  "level": 0,
                },
              ],
              "authenticationComparisonType": "Exact",
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper",
              "includeRequestedAuthenticationContext": true,
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "accountMapping": {
              "spAccountMapper": "com.sun.identity.saml2.plugins.DefaultSPAccountMapper",
              "useNameIDAsSPUserID": true,
            },
            "adapter": {},
            "attributeMapper": {
              "attributeMap": [
                {
                  "key": "http://schemas.microsoft.com/identity/claims/displayname",
                  "value": "cn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                  "value": "givenName",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                  "value": "sn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                  "value": "mail",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                  "value": "uid",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultSPAttributeMapper",
            },
            "autoFederation": {
              "autoFedEnabled": false,
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
            "url": {},
          },
          "services": {
            "metaAlias": "/alpha/iSPAzure",
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/Consumer/ECP/metaAlias/alpha/iSPAzure",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPSloSoap/metaAlias/alpha/iSPAzure",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {},
    "remote": {},
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export -a": should export all saml providers to a single file 1`] = `
"AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "f30717c7ec52ff5fe13dfa0ba3bd0962",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=sales-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=sales-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "f30717c7ec52ff5fe13dfa0ba3bd0962",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=sales-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "3e2c66f09e595edbe4719f89b2142c68",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=engineering-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=engineering-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "3e2c66f09e595edbe4719f89b2142c68",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=engineering-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "5ac34b58b606e7c3d035917a23af91d5",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "5ac34b58b606e7c3d035917a23af91d5",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=https%3A%2F%2Fsts.windows.net%2F711ffa9c-5972-4713-ace3-688c9732614a%2F&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "973a9da1c7a852d87e1e7564be03f4c7",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=company-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=company-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "973a9da1c7a852d87e1e7564be03f4c7",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=company-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "479848461a59bc6e745d07bcc9f0335f",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=iSPAzure&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=iSPAzure&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "479848461a59bc6e745d07bcc9f0335f",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=iSPAzure&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
AxiosError [PollyError]: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
{
  "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha",
  "method": "GET",
  "headers": {
    "accept": "application/json, text/plain, */*",
    "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
    "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
    "content-type": "application/json",
    "accept-api-version": "protocol=2.1,resource=1.0",
    "authorization": "Bearer <access token>",
    "host": "openam-frodo-dev.forgeblocks.com"
  },
  "body": "",
  "recordingName": "default",
  "id": "0dc3a05189e2726e15b256ff2d916027",
  "order": 0,
  "identifiers": {
    "method": "GET",
    "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha"
  },
  "config": {
    "mode": "replay",
    "adapters": [
      "node-http"
    ],
    "logLevel": "warn",
    "flushRequestsOnStop": true,
    "recordIfMissing": false,
    "recordFailedRequests": true,
    "expiresIn": null,
    "expiryStrategy": "warn",
    "matchRequestsBy": {
      "method": true,
      "headers": false,
      "body": true,
      "order": false,
      "url": {
        "protocol": false,
        "username": false,
        "password": false,
        "hostname": false,
        "port": false,
        "pathname": true,
        "query": true,
        "hash": true
      }
    }
  }
}
    at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
    at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
    at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
    at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7) {
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [Function: httpAdapter],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: '\\r\\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      }
    },
    validateStatus: [Function: validateStatus],
    headers: {
      Accept: 'application/json, text/plain, */*',
      'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
      'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
      'Content-Type': 'application/json',
      'Accept-API-Version': 'protocol=2.1,resource=1.0',
      Authorization: 'Bearer <access token>'
    },
    httpAgent: Agent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object: null prototype] {
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    httpsAgent: HttpsAgent {
      _events: [Object: null prototype] {
        free: [Array],
        newListener: [Function: maybeEnableKeylog]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        rejectUnauthorized: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        timeout: 30000,
        freeSocketTimeout: 30000,
        keepAlive: true,
        socketActiveTTL: 0,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {},
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: 100,
      maxFreeSockets: 10,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 0,
      createSocketCount: 0,
      createSocketCountLastCheck: 0,
      createSocketErrorCount: 0,
      createSocketErrorCountLastCheck: 0,
      closeSocketCount: 0,
      closeSocketCountLastCheck: 0,
      errorSocketCount: 0,
      errorSocketCountLastCheck: 0,
      requestCount: 0,
      requestCountLastCheck: 0,
      timeoutSocketCount: 0,
      timeoutSocketCountLastCheck: 0,
      maxCachedSessions: 100,
      _sessionCache: { map: {}, list: [] },
      [Symbol(kCapture)]: false,
      [Symbol(agentkeepalive#currentId)]: 0
    },
    proxy: null,
    withCredentials: true,
    method: 'get',
    url: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
    data: undefined
  },
  request: <ref *2> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: 10485760,
      protocol: 'https:',
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
      method: 'GET',
      headers: {
        Accept: 'application/json, text/plain, */*',
        'User-Agent': '@rockcarver/frodo-lib/2.0.0-48',
        'X-ForgeRock-TransactionId': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'Content-Type': 'application/json',
        'Accept-API-Version': 'protocol=2.1,resource=1.0',
        Authorization: 'Bearer <access token>'
      },
      agent: HttpsAgent {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: 'https:',
        options: [Object: null prototype],
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: 100,
        maxFreeSockets: 10,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        createSocketCount: 0,
        createSocketCountLastCheck: 0,
        createSocketErrorCount: 0,
        createSocketErrorCountLastCheck: 0,
        closeSocketCount: 0,
        closeSocketCountLastCheck: 0,
        errorSocketCount: 0,
        errorSocketCountLastCheck: 0,
        requestCount: 0,
        requestCountLastCheck: 0,
        timeoutSocketCount: 0,
        timeoutSocketCountLastCheck: 0,
        maxCachedSessions: 100,
        _sessionCache: [Object],
        [Symbol(kCapture)]: false,
        [Symbol(agentkeepalive#currentId)]: 0
      },
      agents: { http: [Agent], https: [HttpsAgent] },
      auth: undefined,
      hostname: 'openam-frodo-dev.forgeblocks.com',
      port: null,
      nativeProtocols: { 'http:': [Object], 'https:': [Object] },
      pathname: '/am/saml2/jsp/exportmetadata.jsp',
      search: '?entityid=benefits-IDP&realm=alpha'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> OverriddenClientRequest {
      _events: [Object: null prototype] {
        response: [Function],
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: false,
      _closed: false,
      socket: Socket {
        _events: [Object: null prototype],
        _eventsCount: 3,
        _maxListeners: undefined,
        authorized: true,
        encrypted: true,
        bufferSize: 0,
        writableLength: 0,
        writable: false,
        readable: false,
        pending: false,
        destroyed: true,
        connecting: false,
        _hadError: true,
        timeout: 30000,
        remoteFamily: 'IPv4',
        remoteAddress: '127.0.0.1',
        localAddress: '127.0.0.1',
        remotePort: 443,
        localPort: 443,
        writableFinished: true,
        readableEnded: true,
        [Symbol(kCapture)]: false
      },
      _header: null,
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      path: '/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
      method: 'GET',
      write: [Function (anonymous)],
      end: [Function (anonymous)],
      flushHeaders: [Function (anonymous)],
      req: [Circular *1],
      options: {
        port: 443,
        protocol: 'https:',
        _defaultAgent: [Agent],
        maxRedirects: 21,
        maxBodyLength: 10485760,
        path: '/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
        method: 'GET',
        headers: [Object: null prototype],
        agent: [HttpsAgent],
        agents: [Object],
        auth: undefined,
        hostname: 'openam-frodo-dev.forgeblocks.com',
        nativeProtocols: [Object],
        pathname: '/am/saml2/jsp/exportmetadata.jsp',
        search: '?entityid=benefits-IDP&realm=alpha',
        proto: 'https',
        host: 'openam-frodo-dev.forgeblocks.com:443'
      },
      interceptors: [
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor],
        [Interceptor]
      ],
      response: IncomingMessage {
        _readableState: [ReadableState],
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Socket],
        httpVersionMajor: null,
        httpVersionMinor: null,
        httpVersion: null,
        complete: false,
        rawHeaders: [],
        rawTrailers: [],
        aborted: false,
        upgrade: null,
        url: '',
        method: null,
        statusCode: null,
        statusMessage: null,
        client: [Socket],
        _consuming: false,
        _dumped: false,
        [Symbol(kCapture)]: false,
        [Symbol(kHeaders)]: null,
        [Symbol(kHeadersCount)]: 0,
        [Symbol(kTrailers)]: null,
        [Symbol(kTrailersCount)]: 0
      },
      requestBodyBuffers: [],
      playbackStarted: false,
      readyToStartPlaybackOnSocketEvent: false,
      _redirectable: [Circular *2],
      headers: [Object: null prototype] {
        accept: 'application/json, text/plain, */*',
        'user-agent': '@rockcarver/frodo-lib/2.0.0-48',
        'x-forgerock-transactionid': 'frodo-71303db4-d498-49a7-b4e9-0f594dad7f55',
        'content-type': 'application/json',
        'accept-api-version': 'protocol=2.1,resource=1.0',
        authorization: 'Bearer <access token>',
        host: 'openam-frodo-dev.forgeblocks.com'
      },
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [Array],
        'user-agent': [Array],
        'x-forgerock-transactionid': [Array],
        'content-type': [Array],
        'accept-api-version': [Array],
        authorization: [Array],
        host: [Array]
      },
      [Symbol(kError)]: PollyError: [Polly] [adapter:node-http] Recording for the following request is not found and \`recordIfMissing\` is \`false\`.
      {
        "url": "https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha",
        "method": "GET",
        "headers": {
          "accept": "application/json, text/plain, */*",
          "user-agent": "@rockcarver/frodo-lib/2.0.0-48",
          "x-forgerock-transactionid": "frodo-71303db4-d498-49a7-b4e9-0f594dad7f55",
          "content-type": "application/json",
          "accept-api-version": "protocol=2.1,resource=1.0",
          "authorization": "Bearer <access token>",
          "host": "openam-frodo-dev.forgeblocks.com"
        },
        "body": "",
        "recordingName": "default",
        "id": "0dc3a05189e2726e15b256ff2d916027",
        "order": 0,
        "identifiers": {
          "method": "GET",
          "url": "/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha"
        },
        "config": {
          "mode": "replay",
          "adapters": [
            "node-http"
          ],
          "logLevel": "warn",
          "flushRequestsOnStop": true,
          "recordIfMissing": false,
          "recordFailedRequests": true,
          "expiresIn": null,
          "expiryStrategy": "warn",
          "matchRequestsBy": {
            "method": true,
            "headers": false,
            "body": true,
            "order": false,
            "url": {
              "protocol": false,
              "username": false,
              "password": false,
              "hostname": false,
              "port": false,
              "pathname": true,
              "query": true,
              "hash": true
            }
          }
        }
      }
          at Object.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/utils/dist/cjs/pollyjs-utils.js:100:11)
          at HttpAdapter.assert (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1389:11)
          at HttpAdapter.replay (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1375:10)
          at async HttpAdapter.handleRequest (/snapshot/frodo-rebase-part-2/frodo-lib/node_modules/@pollyjs/adapter/dist/cjs/pollyjs-adapter.js:1219:7)
    },
    _currentUrl: 'https://openam-frodo-dev.forgeblocks.com/am/saml2/jsp/exportmetadata.jsp?entityid=benefits-IDP&realm=alpha',
    _timeout: null,
    [Symbol(kCapture)]: false
  }
}
"
`;

exports[`frodo saml export "frodo saml export -a": should export all saml providers to a single file: ./allAlphaProviders.saml.json 1`] = `
{
  "meta": Any<Object>,
  "saml": {
    "hosted": {
      "Y29tcGFueS1JRFA": {
        "_id": "Y29tcGFueS1JRFA",
        "entityId": "company-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/company",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/company",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/company",
              },
            ],
            "metaAlias": "/alpha/company",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/company",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/company",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/company",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/company",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/company",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/company",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/company",
                },
              ],
            },
          },
        },
      },
      "YmVuZWZpdHMtSURQ": {
        "_id": "YmVuZWZpdHMtSURQ",
        "entityId": "benefits-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/benefits",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/benefits",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/benefits",
              },
            ],
            "metaAlias": "/alpha/benefits",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/benefits",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/benefits",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/benefits",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/benefits",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/benefits",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/benefits",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/benefits",
                },
              ],
            },
          },
        },
      },
      "ZW5naW5lZXJpbmctSURQ": {
        "_id": "ZW5naW5lZXJpbmctSURQ",
        "entityId": "engineering-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/engineering",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/engineering",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/engineering",
              },
            ],
            "metaAlias": "/alpha/engineering",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/engineering",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/engineering",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/engineering",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/engineering",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/engineering",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/engineering",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/engineering",
                },
              ],
            },
          },
        },
      },
      "aVNQQXp1cmU": {
        "_id": "aVNQQXp1cmU",
        "entityId": "iSPAzure",
        "serviceProvider": {
          "advanced": {
            "ecpConfiguration": {
              "ecpRequestIdpListFinderImpl": "com.sun.identity.saml2.plugins.ECPIDPFinder",
            },
            "idpProxy": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "spUrl": "https://idc.scheuber.io/am/spsaehandler/metaAlias/alpha/iSPAzure",
            },
          },
          "assertionContent": {
            "assertionTimeSkew": 300,
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "defaultItem": true,
                  "level": 0,
                },
              ],
              "authenticationComparisonType": "Exact",
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper",
              "includeRequestedAuthenticationContext": true,
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "accountMapping": {
              "spAccountMapper": "com.sun.identity.saml2.plugins.DefaultSPAccountMapper",
              "useNameIDAsSPUserID": true,
            },
            "adapter": {},
            "attributeMapper": {
              "attributeMap": [
                {
                  "key": "http://schemas.microsoft.com/identity/claims/displayname",
                  "value": "cn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                  "value": "givenName",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                  "value": "sn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                  "value": "mail",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                  "value": "uid",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultSPAttributeMapper",
            },
            "autoFederation": {
              "autoFedEnabled": false,
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
            "url": {},
          },
          "services": {
            "metaAlias": "/alpha/iSPAzure",
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/Consumer/ECP/metaAlias/alpha/iSPAzure",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPSloSoap/metaAlias/alpha/iSPAzure",
                },
              ],
            },
          },
        },
      },
      "c2FsZXMtSURQ": {
        "_id": "c2FsZXMtSURQ",
        "entityId": "sales-IDP",
        "identityProvider": {
          "advanced": {
            "ecpConfiguration": {
              "idpSessionMapper": "com.sun.identity.saml2.plugins.DefaultIDPECPSessionMapper",
            },
            "idpAdapter": {
              "idpAdapterScript": "[Empty]",
            },
            "idpFinderImplementation": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "idpUrl": "https://openam-volker-demo.forgeblocks.com/am/idpsaehandler/metaAlias/alpha/sales",
            },
            "sessionSynchronization": {},
          },
          "assertionContent": {
            "assertionCache": {},
            "assertionTime": {
              "effectiveTime": 600,
              "notBeforeTimeSkew": 600,
            },
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "level": 0,
                },
              ],
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultIDPAuthnContextMapper",
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
              "nameIdValueMap": [
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                  "value": "mail",
                },
                {
                  "binary": false,
                  "key": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified ",
                  "value": "mail",
                },
              ],
            },
            "signingAndEncryption": {
              "encryption": {
                "nameIdEncryption": false,
              },
              "requestResponseSigning": {
                "artifactResolve": true,
                "authenticationRequest": true,
                "logoutRequest": false,
                "logoutResponse": false,
                "manageNameIdRequest": false,
                "manageNameIdResponse": false,
              },
              "secretIdAndAlgorithms": {
                "digestAlgorithm": [
                  "http://www.w3.org/2001/04/xmlenc#sha256",
                ],
                "encryptionAlgorithm": [
                  "http://www.w3.org/2009/xmlenc11#rsa-oaep",
                ],
                "signingAlgorithm": [],
              },
            },
          },
          "assertionProcessing": {
            "accountMapper": {
              "accountMapper": "com.sun.identity.saml2.plugins.DefaultIDPAccountMapper",
            },
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "SSOID",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Email",
                },
                {
                  "binary": false,
                  "localAttribute": ""Standard User"",
                  "samlAttribute": "User.ProfileID",
                },
                {
                  "binary": false,
                  "localAttribute": "sn",
                  "samlAttribute": "User.LastName",
                },
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "User.Username",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultIDPAttributeMapper",
              "attributeMapperScript": "[Empty]",
            },
            "localConfiguration": {},
          },
          "services": {
            "assertionIdRequest": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqSoap/IDPRole/metaAlias/alpha/sales",
              },
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:URI",
                "location": "https://openam-volker-demo.forgeblocks.com/am/AIDReqUri/IDPRole/metaAlias/alpha/sales",
              },
            ],
            "metaAlias": "/alpha/sales",
            "nameIdMapping": [
              {
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                "location": "https://openam-volker-demo.forgeblocks.com/am/NIMSoap/metaAlias/alpha/sales",
              },
            ],
            "serviceAttributes": {
              "artifactResolutionService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "openam-volker-demo.forgeblocks.com/am/ArtifactResolver/metaAlias/alpha/sales",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/sales",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPMniPOST/metaAlias/alpha/sales",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/sales",
                  "responseLocation": "https://openam-volker-demo.forgeblocks.com/am/IDPSloPOST/metaAlias/alpha/sales",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://openam-volker-demo.forgeblocks.com/am/SSOPOST/metaAlias/alpha/sales",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {
      "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l": [
        "<?xml version="1.0" encoding="UTF-8" standalone="yes"?>",
        "<EntityDescriptor entityID="urn:federation:MicrosoftOnline" ID="_e46a1193-e8a7-48ed-804f-1516729ecb5f" xmlns="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:query="urn:oasis:names:tc:SAML:metadata:ext:query" xmlns:mdattr="urn:oasis:names:tc:SAML:metadata:attribute" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:xenc11="http://www.w3.org/2009/xmlenc11#" xmlns:alg="urn:oasis:names:tc:SAML:metadata:algsupport" xmlns:x509qry="urn:oasis:names:tc:SAML:metadata:X509:query" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">",
        "    <Extensions>",
        "        <alg:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>",
        "        <alg:SigningMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>",
        "    </Extensions>",
        "    <SPSSODescriptor WantAssertionsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQbgDHfi3t1JNGVqwD5/7lmjANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjAxMjIxMDAwMDAwWhcNMjUxMjIx",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFT0/0/2qQurnYa0LbJHF9YYozhEH6r9mCxVDBYbew",
        "SG4tGgrWpsewQ/96pcczGMQctMvU+h2eX38Hx/f9JAIDbuRQzQlsPhQS7DDZ6WlTXU+t8d/g2C7f",
        "pSoLs4KVdJih4xyjLUWj+BK/ijsRjBt4Riw9VbJH/DdWKyoSMbECEiE+s1RtLP/eYoMmNfxyQGqW",
        "irCNqVNBTlqzYQp4dgF0foYy4ktoxwmQOVoTcIMFYp1I4pFPI7CxuMLkfK0X7aTbM7YGphvMfJxJ",
        "kjrQdyI7G5d1t4DNi3zkEbBT7FGAr6qPt3Kn9ralpqJKHdpEBA9N0vNwQo5XTYIhUbPQ16IRAgMB",
        "AAGjITAfMB0GA1UdDgQWBBRs7tPmfkksSr67KtElHjYZbeaCTjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "JqwMZSjQJ36x+1sty6EeLKQLQewQwPaEC47Zut+8bXed6Q8jMZ0bfa/MM7XquEcabaMZLQuKLft4",
        "4YXwXXQOfQrI2qjQr3eToJFlDT9hR0rfp9wQqttDxd6Aa6RWwDTgo5oKUQCTKLHhEy8uWzScK0eG",
        "t2d7TWTaDXjRSwNq6tM7fRhZs07tKBV3xfi9EQy/mlavAMFRBVm86NSo7AsOG1IOMq03U3ooCWAX",
        "h9PdvvHNfHhH19futAnC/HeOjwRF1Qc527aBMphYFQLdiThfmfmiE/AhQqCwZ2oE7uCJhBtR+Kb1",
        "ZGhjI35pHfsSqGiFa7Kr+5ave822PDcke89Mvg==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQN/GPegnT8blP2EcSdMMbBzANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjEwMjE4MDAwMDAwWhcNMjYwMjE4",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDXdLGU2Ll5RPdDUnKQ+f/HS5qiTay2cCh9U2AS6oDM",
        "6SOxVhYGtoeJ1VPebcLnpgLfhPxzrwWoVzXSEF+VRQbnYID2Jb4khjgyEeoThk3VqrThwhahpSbB",
        "g2vo06vIOp1TS2R1BiwHKTLoB1i1IJnaIFSC3BN6pY4flXWyLQt/5ABXElv2XZLqXM9Eefj6Ji40",
        "nLIsiW4dWw3BDa/ywWW0MsiW5ojGq4vovcAgENe/4NUbju70gHP/WS5D9bW5p+OIQi7/unrlWe/h",
        "3A6jtBbbRlXYXlN+Z22uTTyyCD/W8zeXaACLvHagwEMrQePDXBZqc/iX2kI+ooZr1sC/H39RAgMB",
        "AAGjITAfMB0GA1UdDgQWBBSrX2dm3LwT9jb/p+bAAdYQpE+/NjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "eqJfYHnsA9qhGttXFfFpPW4DQLh5w6JCce7vGvWINr5fr1DnQdcOr+wwjQ/tqbckAL2v6z1AqjhS",
        "78kbfegnAQDwioJZ1olYYvLOxKoa6HF+b1/p0Mlub8Zukk2n1b2lKPBBOibOasSY7gQDwlIZi7tl",
        "9nMTxUfdYK+E5Axv7DVnmUCwcnnpV5/1SFdNyW2kWO4C68rrjMOvECfwrKkbfVJM8f9krEUBuoBF",
        "8dTDv7D2ZM4Q2buC70NbfaNWUX0yFvKI0IuTqk8RBfGTRQ4fZAbhMPaykEpBu6dNjTi5YOa0lNqF",
        "GS7Ax7leCh5x9lV8elcLkXs8ySo8AOQJk0hgIw==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <KeyDescriptor use="signing">",
        "            <ds:KeyInfo>",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                ",
        "                <ds:X509Data>",
        "                    <ds:X509Certificate>",
        "MIIC/TCCAeWgAwIBAgIQN/GPegnT8blP2EcSdMMbBzANBgkqhkiG9w0BAQsFADApMScwJQYDVQQD",
        "Ex5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwHhcNMjEwMjE4MDAwMDAwWhcNMjYwMjE4",
        "MDAwMDAwWjApMScwJQYDVQQDEx5MaXZlIElEIFNUUyBTaWduaW5nIFB1YmxpYyBLZXkwggEiMA0G",
        "CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDXdLGU2Ll5RPdDUnKQ+f/HS5qiTay2cCh9U2AS6oDM",
        "6SOxVhYGtoeJ1VPebcLnpgLfhPxzrwWoVzXSEF+VRQbnYID2Jb4khjgyEeoThk3VqrThwhahpSbB",
        "g2vo06vIOp1TS2R1BiwHKTLoB1i1IJnaIFSC3BN6pY4flXWyLQt/5ABXElv2XZLqXM9Eefj6Ji40",
        "nLIsiW4dWw3BDa/ywWW0MsiW5ojGq4vovcAgENe/4NUbju70gHP/WS5D9bW5p+OIQi7/unrlWe/h",
        "3A6jtBbbRlXYXlN+Z22uTTyyCD/W8zeXaACLvHagwEMrQePDXBZqc/iX2kI+ooZr1sC/H39RAgMB",
        "AAGjITAfMB0GA1UdDgQWBBSrX2dm3LwT9jb/p+bAAdYQpE+/NjANBgkqhkiG9w0BAQsFAAOCAQEA",
        "eqJfYHnsA9qhGttXFfFpPW4DQLh5w6JCce7vGvWINr5fr1DnQdcOr+wwjQ/tqbckAL2v6z1AqjhS",
        "78kbfegnAQDwioJZ1olYYvLOxKoa6HF+b1/p0Mlub8Zukk2n1b2lKPBBOibOasSY7gQDwlIZi7tl",
        "9nMTxUfdYK+E5Axv7DVnmUCwcnnpV5/1SFdNyW2kWO4C68rrjMOvECfwrKkbfVJM8f9krEUBuoBF",
        "8dTDv7D2ZM4Q2buC70NbfaNWUX0yFvKI0IuTqk8RBfGTRQ4fZAbhMPaykEpBu6dNjTi5YOa0lNqF",
        "GS7Ax7leCh5x9lV8elcLkXs8ySo8AOQJk0hgIw==",
        "                    </ds:X509Certificate>",
        "                </ds:X509Data>",
        "            </ds:KeyInfo>",
        "        </KeyDescriptor>",
        "        <SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</NameIDFormat>",
        "        <NameIDFormat>urn:mace:shibboleth:1.0:nameIdentifier</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</NameIDFormat>",
        "        <NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</NameIDFormat>",
        "        <AssertionConsumerService index="0" isDefault="true" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <AssertionConsumerService index="1" isDefault="false" Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign" Location="https://login.microsoftonline.com/login.srf"/>",
        "        <AssertionConsumerService index="2" isDefault="false" Binding="urn:oasis:names:tc:SAML:2.0:bindings:PAOS" Location="https://login.microsoftonline.com/login.srf"/>",
        "    </SPSSODescriptor>",
        "</EntityDescriptor>",
        "",
        "",
      ],
    },
    "remote": {
      "aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzExZmZhOWMtNTk3Mi00NzEzLWFjZTMtNjg4Yzk3MzI2MTRhLw": {
        "_id": "aHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzExZmZhOWMtNTk3Mi00NzEzLWFjZTMtNjg4Yzk3MzI2MTRhLw",
        "entityId": "https://sts.windows.net/711ffa9c-5972-4713-ace3-688c9732614a/",
        "identityProvider": {
          "assertionContent": {
            "basicAuthentication": {},
            "nameIdFormat": {},
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "services": {
            "serviceAttributes": {
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
              ],
              "singleSignOnService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://login.microsoftonline.com/711ffa9c-5972-4713-ace3-688c9732614a/saml2",
                },
              ],
            },
          },
        },
      },
      "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l": {
        "_id": "dXJuOmZlZGVyYXRpb246TWljcm9zb2Z0T25saW5l",
        "entityId": "urn:federation:MicrosoftOnline",
        "serviceProvider": {
          "advanced": {
            "idpProxy": {},
            "saeConfiguration": {},
          },
          "assertionContent": {
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:mace:shibboleth:1.0:nameIdentifier",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {
                "assertion": true,
              },
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "attributeMapper": {
              "attributeMap": [
                {
                  "binary": false,
                  "localAttribute": "mail",
                  "samlAttribute": "IDPEmail",
                },
                {
                  "binary": false,
                  "localAttribute": "UOPClassID",
                  "samlAttribute": "UOPClassID",
                },
              ],
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
          },
          "services": {
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST-SimpleSign",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://login.microsoftonline.com/login.srf",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://login.microsoftonline.com/login.srf",
                },
              ],
            },
          },
        },
      },
    },
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export -i iSPAzure -f my-iSPAzure.saml.json": should export the saml provider with entity id "iSPAzure" into file named my-iSPAzure.saml.json 1`] = `""`;

exports[`frodo saml export "frodo saml export -i iSPAzure -f my-iSPAzure.saml.json": should export the saml provider with entity id "iSPAzure" into file named my-iSPAzure.saml.json: ./my-iSPAzure.saml.json 1`] = `
{
  "meta": Any<Object>,
  "saml": {
    "hosted": {
      "aVNQQXp1cmU": {
        "_id": "aVNQQXp1cmU",
        "entityId": "iSPAzure",
        "serviceProvider": {
          "advanced": {
            "ecpConfiguration": {
              "ecpRequestIdpListFinderImpl": "com.sun.identity.saml2.plugins.ECPIDPFinder",
            },
            "idpProxy": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "spUrl": "https://idc.scheuber.io/am/spsaehandler/metaAlias/alpha/iSPAzure",
            },
          },
          "assertionContent": {
            "assertionTimeSkew": 300,
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "defaultItem": true,
                  "level": 0,
                },
              ],
              "authenticationComparisonType": "Exact",
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper",
              "includeRequestedAuthenticationContext": true,
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "accountMapping": {
              "spAccountMapper": "com.sun.identity.saml2.plugins.DefaultSPAccountMapper",
              "useNameIDAsSPUserID": true,
            },
            "adapter": {},
            "attributeMapper": {
              "attributeMap": [
                {
                  "key": "http://schemas.microsoft.com/identity/claims/displayname",
                  "value": "cn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                  "value": "givenName",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                  "value": "sn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                  "value": "mail",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                  "value": "uid",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultSPAttributeMapper",
            },
            "autoFederation": {
              "autoFedEnabled": false,
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
            "url": {},
          },
          "services": {
            "metaAlias": "/alpha/iSPAzure",
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/Consumer/ECP/metaAlias/alpha/iSPAzure",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPSloSoap/metaAlias/alpha/iSPAzure",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {},
    "remote": {},
  },
  "script": {},
}
`;

exports[`frodo saml export "frodo saml export -i iSPAzure": should export the saml provider with entity id "iSPAzure" 1`] = `""`;

exports[`frodo saml export "frodo saml export -i iSPAzure": should export the saml provider with entity id "iSPAzure": ./iSPAzure.saml.json 1`] = `
{
  "meta": Any<Object>,
  "saml": {
    "hosted": {
      "aVNQQXp1cmU": {
        "_id": "aVNQQXp1cmU",
        "entityId": "iSPAzure",
        "serviceProvider": {
          "advanced": {
            "ecpConfiguration": {
              "ecpRequestIdpListFinderImpl": "com.sun.identity.saml2.plugins.ECPIDPFinder",
            },
            "idpProxy": {},
            "relayStateUrlList": {},
            "saeConfiguration": {
              "spUrl": "https://idc.scheuber.io/am/spsaehandler/metaAlias/alpha/iSPAzure",
            },
          },
          "assertionContent": {
            "assertionTimeSkew": 300,
            "authenticationContext": {
              "authContextItems": [
                {
                  "contextReference": "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                  "defaultItem": true,
                  "level": 0,
                },
              ],
              "authenticationComparisonType": "Exact",
              "authenticationContextMapper": "com.sun.identity.saml2.plugins.DefaultSPAuthnContextMapper",
              "includeRequestedAuthenticationContext": true,
            },
            "basicAuthentication": {},
            "nameIdFormat": {
              "nameIdFormatList": [
                "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName",
                "urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos",
                "urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName",
              ],
            },
            "signingAndEncryption": {
              "encryption": {},
              "requestResponseSigning": {},
              "secretIdAndAlgorithms": {},
            },
          },
          "assertionProcessing": {
            "accountMapping": {
              "spAccountMapper": "com.sun.identity.saml2.plugins.DefaultSPAccountMapper",
              "useNameIDAsSPUserID": true,
            },
            "adapter": {},
            "attributeMapper": {
              "attributeMap": [
                {
                  "key": "http://schemas.microsoft.com/identity/claims/displayname",
                  "value": "cn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                  "value": "givenName",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                  "value": "sn",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                  "value": "mail",
                },
                {
                  "key": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name",
                  "value": "uid",
                },
              ],
              "attributeMapper": "com.sun.identity.saml2.plugins.DefaultSPAttributeMapper",
            },
            "autoFederation": {
              "autoFedEnabled": false,
            },
            "responseArtifactMessageEncoding": {
              "encoding": "URI",
            },
            "url": {},
          },
          "services": {
            "metaAlias": "/alpha/iSPAzure",
            "serviceAttributes": {
              "assertionConsumerService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact",
                  "index": 0,
                  "isDefault": true,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "index": 1,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/AuthConsumer/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:PAOS",
                  "index": 2,
                  "isDefault": false,
                  "location": "https://idc.scheuber.io/am/Consumer/ECP/metaAlias/alpha/iSPAzure",
                },
              ],
              "nameIdService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPMniSoap/metaAlias/alpha/iSPAzure",
                },
              ],
              "singleLogoutService": [
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                  "location": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloRedirect/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
                  "location": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                  "responseLocation": "https://idc.scheuber.io/am/SPSloPOST/metaAlias/alpha/iSPAzure",
                },
                {
                  "binding": "urn:oasis:names:tc:SAML:2.0:bindings:SOAP",
                  "location": "https://idc.scheuber.io/am/SPSloSoap/metaAlias/alpha/iSPAzure",
                },
              ],
            },
          },
        },
      },
    },
    "metadata": {},
    "remote": {},
  },
  "script": {},
}
`;
